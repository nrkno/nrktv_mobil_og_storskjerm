#+STARTUP: fold
#+EXPORT_FILE_NAME: readme.org
#+OPTIONS: date: nil
#+OPTIONS: author: nil
#+OPTIONS: title: NRK TV på mobil og storskjerm - hånd i hånd
#+PROPERTY: header-args:python :session *Python* :tangle kode.py :comments both :eval never-export :exports both :results silent
#+PROPERTY: header-args:bigquery :eval never-export :exports both :tangle mobil_og_storskjerm.sql :results table

#+begin_src emacs-lisp :exports results :results none
  ;; Dette gjør om bigquery-blokker til sql-blokker (for å få fargelegging på teksten)
  ;; og fjerner results-nøkkelordet (som gjemmer resultatene på github)
  (defun bytt-bigquery-til-sql (s backend info)
    (replace-regexp-in-string "bigquery" "sql" s))

  (defun fjern-resultatmerke (s backend info)
    (replace-regexp-in-string "#\\+results:[ ]+" "" s))

  (defun tusenskille-og-komma (s backend info)
    (let ((num (number-to-string s)))
      (string-match "\\([0-9]+\\)\\.\\([0-9]+\\)" num)
      (let ((hel (match-string 1 num))
  	  (dec (if (string= (match-string 2 num) ".0") "" (match-string 2 num))))
        (while (string-match "\\(.*[0-9]\\)\\([0-9][0-9][0-9].*\\)" hel)
  	(setq hel (concat
  		   (match-string 1 hel) " "
  		   (match-string 2 hel))))
        (concat hel "," dec))))

  (add-to-list 'org-export-filter-src-block-functions
      	     'bytt-bigquery-til-sql)
  (add-to-list 'org-export-filter-body-functions
      	     'fjern-resultatmerke)
  (add-to-list 'org-export-filter-table-functions
     	     'tusenskille-og-komma)

#+end_src

* Innledning
Her skal jeg forsøke å sammenligne bruken av NRK TV på mobil og storskjerm. Hensikten er å gi innsikt i hva NRK TV-appen skal være på mobile enheter. Jeg skal sammenligne
- antall besøk
- antall skjermvisninger
- påloggingsandel
- når på døgnet aktiviteten er
- hvilken type bruk som er typisk for plattformen
  - tid brukt på å spille av innhold
  - andelen fornøyde avspillinger
  - er mobilen bare en fjernkontroll?


Jeg skal også se på
- hvor mange som er på logget begge plattformene


Perioden jeg ser på er de siste tretti dagene.

* Overordnede metrikker
Jeg ser først på antall klienter og antall besøk på hver plattform.

Det er tilsynelatende sånn at det ikke alltid genereres en ny sessionId når et nytt besøk starter. Dette har jeg lagt merke til fordi det er en del tilfeller der det mangler flere previousViewId for samme sessionId. Jeg tolker dette som at det er et nytt besøk. Jeg har derfor lagt inn litt ekstra logikk for å telle med disse besøkene.
#+begin_src bigquery
  #standardSQL
  WITH
    KILDE AS (
      SELECT DISTINCT platform, sessionId, nrkUserId IS NOT NULL `pålogget`,
  		    visitorId,
  		    COUNTIF(previousViewId IS NULL) OVER(PARTITION BY sessionId ORDER BY firstTimeStamp) sub_sesjon
        FROM `nrk-datahub.snowplow_processed.views_v02`
       WHERE partitionDate = CURRENT_DATE - 1
         AND nrkService = 'nrktv'
         AND platform IN ('mob','tv')
         AND appId NOT IN ('no.nrk.nrktvapp.swift', 'no.nrk.goldendelicious.cdntest', 'no.nrk.NRK-Super')),

    `BESØKSTYPE` AS (  
      SELECT platform, sub_sesjon, sessionId, visitorId,
             LOGICAL_OR(`pålogget`) OVER(PARTITION BY sessionId, sub_sesjon) `pålogget besøk`,
        FROM KILDE),

    OPPSUMMERING AS (
      SELECT platform, sub_sesjon, COUNT(DISTINCT IF(`pålogget besøk`, sessionId, NULL)) `pålogget besøk`,
             COUNT(DISTINCT sessionId) `besøk`
        FROM `BESØKSTYPE`
       GROUP BY ALL)

  SELECT platform plattform, `Antall klienter`, SUM(`besøk`) `Antall besøk`,
         ROUND(SUM(`besøk`) / `Antall klienter`, 2) `Besøk per klient`,
         ROUND(SUM(`pålogget besøk`) / SUM(`besøk`) * 100, 1) `Andel påloggede besøk i prosent`
    FROM OPPSUMMERING
         JOIN (SELECT platform, COUNT(DISTINCT visitorId) `Antall klienter` FROM `BESØKSTYPE` GROUP BY 1) USING(platform)
   GROUP BY ALL
#+end_src

#+RESULTS:
| platform | Antall klienter | Antall besøk | Besøk per klient | Andel påloggede besøk i prosent |
|----------+-----------------+--------------+------------------+---------------------------------|
| tv       |          423761 |       694399 |             1.64 |                            60.0 |
| mob      |          185320 |       293798 |             1.59 |                            65.6 |

* Navigasjon
Nå skal jeg se om det er noen forskjell i hvor mye det navigeres på de to plattformene.

#+name: kum_fordeling
#+begin_src bigquery
  #standardSQL
  WITH
    KILDE AS (
      SELECT platform, nrkUserId IS NOT NULL `pålogget`, sessionId, viewId,
  	   COUNTIF(previousViewId IS NULL) OVER(PARTITION BY sessionId ORDER BY firstTimeStamp) sub_sesjon
        FROM `nrk-datahub.snowplow_processed.views_v02`
       WHERE partitionDate = CURRENT_DATE - 1
         AND nrkService = 'nrktv'
         AND platform IN ('mob','tv')
         AND appId NOT IN ('no.nrk.nrktvapp.swift', 'no.nrk.goldendelicious.cdntest', 'no.nrk.NRK-Super')),

    `BESØKSTYPE` AS (  
      SELECT platform, sub_sesjon, sessionId, viewId,
             LOGICAL_OR(`pålogget`) OVER(PARTITION BY sessionId, sub_sesjon) `pålogget besøk`,
        FROM KILDE),

    OPPSUMMERING AS (
      SELECT platform, sub_sesjon, `pålogget besøk`, sessionId, COUNT(DISTINCT viewId) skjermvisninger,
        FROM `BESØKSTYPE`
       GROUP BY ALL)
      
  SELECT DISTINCT platform, `pålogget besøk`, skjermvisninger,
  		COUNT(*) OVER(PARTITION BY platform, `pålogget besøk` ORDER BY skjermvisninger) `kumulativ sum`,
  		COUNT(*) OVER(PARTITION BY platform, `pålogget besøk`) `Antall besøk`
    FROM OPPSUMMERING
   ORDER BY 1, 2, 3
#+end_src

#+begin_src python
  import pandas as pd
  import matplotlib.pyplot as plt
  from matplotlib.path import Path
  import matplotlib.dates as mdates
  from matplotlib.ticker import FixedLocator
  from matplotlib.dates import DateFormatter
  import numpy as np
  import pandas_gbq
#+end_src

#+begin_src python :noweb yes
  spørring = """
  <<kum_fordeling>>
  """

  df = pandas_gbq.read_gbq(spørring)
#+end_src

#+begin_src python
  df["pst"] = df["kumulativ sum"] / df["Antall besøk"]
  df["mediandiff"] = abs(df.pst - .5)
  median=df[(df.mediandiff == df.groupby("platform").mediandiff.min().iloc[0]) | (df.mediandiff == df.groupby("platform").mediandiff.min().iloc[1])][["platform","skjermvisninger","pst"]].set_index("platform")
#+end_src

#+begin_src python :results graphics file output :file figurer/navigasjonslengde.png
  fig, ax = plt.subplots(figsize=(11,7))
  ax.set_xlim([0,40])
  ax.set_title("Kumulativ fordeling av antall skjermvisninger\n (jo flere skjermvisninger, dess mer tid brukt på navigasjon)")
  ax.annotate("Påloggede og ikke-påloggede brukere\nskiller seg lite fra hverandre innad\ni plattformen fom. fire skjermvisninger", xy=(4,.4), xytext=(15,.4), arrowprops=dict(arrowstyle="->", facecolor="black"), va="bottom", ha="left")
  ax.annotate("", xy=(4,.48), xytext=(15,.4), arrowprops=dict(arrowstyle="->", facecolor="black"))
  ax.annotate("Etter to skjermvisninger er det en større\nandel påloggede enn ikke-påloggede.", xy=(2,.26), xytext=(10,.26), arrowprops=dict(arrowstyle="->", facecolor="black"))
  ax.annotate(f"For mob er det ca. {round(1 - median.loc["mob"].pst, 3) * 100} % som har {int(median.loc["mob"].skjermvisninger)} eller flere skjermvisninger,\nmens det på tv er ca. {round(1 - median.loc["tv"].pst, 3) * 100} % som har {int(median.loc["tv"].skjermvisninger)} eller flere skjermvisninger.\nDet betyr at det navigeres litt mer på mobil enn på tv.", xy=(median.loc["mob"].skjermvisninger, median.loc["mob"].pst), xytext=(10,.6), arrowprops=dict(arrowstyle="->", facecolor="black"))
  df.pivot(index="skjermvisninger", columns=["platform","pålogget besøk"], values="pst").plot(ax=ax, marker="o")
#+end_src

#+RESULTS:
[[file:figurer/navigasjonslengde.png]]

** Navigasjonsmønstre
Jeg går videre med å finne ut hva de vanligste navigasjonsmønstrne er på de ulike plattformene. Til dette tar jeg utgangspunkt i en spørring jeg har fra arbeidet med direktesidene.

#+begin_src bigquery
WITH
  VISNING AS (
  SELECT DISTINCT viewId, previousViewId, nrkUserId IS NOT NULL `pålogget`, userOrProfile, platform, appId,
         IF(appId IN ('no.nrk.tv.smart-tv', 'no.nrk.tv.web'),
           CASE
             WHEN SPLIT(page.path, '/')[SAFE_OFFSET(1)] = 'direkte' AND SPLIT(page.path, '/')[SAFE_OFFSET(3)] = 'avspiller' THEN 
               CASE -- Deler opp tilfellene der vi skal ha med kanal
                 WHEN SPLIT(page.path, '/')[SAFE_OFFSET(2)] LIKE 'nrk1_%' THEN 'avspiller (nrk1)'
                 WHEN REGEXP_CONTAINS(SPLIT(page.path, '/')[SAFE_OFFSET(2)], r'^nrk(s.+|_|tv\d|\d)+') THEN CONCAT('avspiller (', SPLIT(page.path, '/')[SAFE_OFFSET(2)] , ')')
               END
             WHEN SPLIT(page.path, '/')[SAFE_OFFSET(1)] = 'direkte' THEN 
               CASE
                 WHEN SPLIT(page.path, '/')[SAFE_OFFSET(2)] LIKE 'nrk1_%' THEN 'direkte (nrk1)'
                 WHEN REGEXP_CONTAINS(SPLIT(page.path, '/')[SAFE_OFFSET(2)], r'^nrk(s.+|_|tv\d|\d)+') THEN CONCAT('direkte (', SPLIT(page.path, '/')[SAFE_OFFSET(2)] , ')')
                 ELSE 'direkte'
               END
             WHEN SPLIT(page.path, '/')[SAFE_OFFSET(1)] = 'epg' THEN 
               CASE
                 WHEN SPLIT(page.path, '/')[SAFE_OFFSET(2)] LIKE 'nrk1_%' THEN 'tv-guide (nrk1)'
                 WHEN REGEXP_CONTAINS(SPLIT(page.path, '/')[SAFE_OFFSET(2)], r'^nrk(s.+|_|tv\d|\d)+') THEN CONCAT('tv-guide (', SPLIT(page.path, '/')[SAFE_OFFSET(2)] , ')')
                 ELSE 'tv-guide'
               END
             WHEN SPLIT(page.path, '/')[SAFE_OFFSET(1)] != '' THEN 
               CASE
                 WHEN REGEXP_CONTAINS(page.path, r'mitt-?innhold') THEN 'mitt innhold'
                 WHEN REGEXP_CONTAINS(page.path, r'chromecast') THEN 'chromecast-remote'
                 WHEN SPLIT(page.path, '/')[SAFE_OFFSET(1)] = 'search' OR SPLIT(page.path, '/')[SAFE_OFFSET(1)] = 'sok' THEN 'søk'
                 WHEN REGEXP_CONTAINS(SPLIT(page.path, '/')[SAFE_OFFSET(1)], r'logg?-') OR REGEXP_CONTAINS(SPLIT(page.path, '/')[SAFE_OFFSET(1)], r'profil') OR REGEXP_CONTAINS(SPLIT(page.path, '/')[SAFE_OFFSET(1)], r'sales-') OR REGEXP_CONTAINS(SPLIT(page.path, '/')[SAFE_OFFSET(1)], r'avatar') THEN 'innsalg, pålogging og profiladmin'
                 ELSE SPLIT(page.path, '/')[SAFE_OFFSET(1)]
               END
             WHEN SPLIT(page.path, '/')[SAFE_OFFSET(1)] = '' THEN 'forsiden'
             ELSE page.path
           END,
           CONCAT(
             CASE
               WHEN mobileViewName = 'frontpage' THEN 'forsiden'
               WHEN SPLIT(mobileViewName, '/')[SAFE_OFFSET(0)] = 'live' THEN CONCAT('direkte (', SPLIT(mobileViewName, '/')[SAFE_OFFSET(1)], ')')
               WHEN SPLIT(mobileViewName, '/')[SAFE_OFFSET(0)] = 'category' THEN 'kategori'
               WHEN mobileViewName = 'categories' THEN 'kategorier'
               WHEN REGEXP_CONTAINS(mobileViewName, r'chromecast') THEN 'chromecast-remote'
               WHEN REGEXP_CONTAINS(mobileViewName, r'logg?-') OR REGEXP_CONTAINS(mobileViewName, r'profil') OR REGEXP_CONTAINS(mobileViewName, r'sales-') OR REGEXP_CONTAINS(mobileViewName, r'avatar') THEN 'innsalg, pålogging og profiladmin'
               WHEN REGEXP_CONTAINS(mobileViewName, r'mitt-?innhold') OR mobileViewName = 'myContent' THEN 'mitt innhold'
               WHEN mobileViewName = 'player' THEN 'avspiller'
               WHEN REGEXP_CONTAINS(mobileViewName, r'search|sok') THEN 'søk'
               WHEN SPLIT(mobileViewName, '/')[SAFE_OFFSET(0)] IS NOT NULL THEN IF(SPLIT(mobileViewName, '/')[SAFE_OFFSET(0)] = 'series', 'serier', SPLIT(mobileViewName, '/')[SAFE_OFFSET(0)])
              ELSE mobileViewName
             END,
             CASE
               WHEN content.id LIKE 'nrk1_%' THEN ' (nrk1)'
               WHEN REGEXP_CONTAINS(content.id, r'^nrk(_|tv\d|\d)+') THEN CONCAT(' (', content.id, ')')
               ELSE ''
             END)
         ) skjerm,
         inntrykk, IFNULL(klikk, 0) klikk,
         sessionId, firstTimeStamp, p.secondsConsumed,
         COUNTIF(previousViewId IS NULL) OVER(PARTITION BY sessionId ORDER BY firstTimeStamp) sub_sesjon,
         COUNT(DISTINCT sessionId) antall
    FROM `nrk-datahub.snowplow_processed.views_v02`
         LEFT JOIN `nrk-datahub.prod.registered_users_v01` USING(nrkUserId)
         LEFT JOIN (SELECT viewId, secondsConsumed FROM `nrk-datahub.snowplow_processed.playback_v02` WHERE partitionDate = CURRENT_DATE - 2 AND nrkService = 'nrktv') p USING(viewId)
         LEFT JOIN (SELECT viewId, COUNT(DISTINCT plugOrLinkTitle) inntrykk, COUNT(DISTINCT IF(clicked IS NOT NULL, plugOrLinkTitle, NULL)) klikk FROM `nrk-datahub.snowplow_processed.impressions_v02`  WHERE partitionDate = CURRENT_DATE - 2 AND nrkService = 'nrktv' GROUP BY ALL) i USING(viewId)
   WHERE partitionDate = CURRENT_DATE - 2
     AND nrkService = 'nrktv'
     AND platform IN ('mob', 'tv')
     GROUP BY ALL),

  STIER AS (
  SELECT platform,
         TIME(TIMESTAMP_SECONDS(CAST(FLOOR(UNIX_SECONDS(firstTimeStamp) / 1200) * 1200 AS INT64)), 'Europe/Oslo') tidspunkt,
         userOrProfile, v1.skjerm visning1, v2.skjerm visning2, v3.skjerm visning3, 
         LOGICAL_OR(`pålogget`) OVER(PARTITION BY v1.sessionId, v1.sub_sesjon) `pålogget besøk`,
         IFNULL(v1.secondsConsumed, 0) + IFNULL(v2.secondsConsumed, 0) + IFNULL(v3.secondsConsumed, 0) secondsConsumed, IFNULL(v1.inntrykk, 0) + IFNULL(v2.inntrykk, 0) + IFNULL(v3.inntrykk, 0) inntrykk, IFNULL(v1.klikk, 0) + IFNULL(v2.klikk, 0) + IFNULL(v3.klikk, 0) klikk,
    FROM VISNING v1
         LEFT JOIN (SELECT sessionId, viewId, sub_sesjon, previousViewId, skjerm, inntrykk, klikk, secondsConsumed FROM VISNING) v2 ON v1.viewId = v2.previousViewId AND v1.sub_sesjon = v2.sub_sesjon AND v1.sessionId = v2.sessionId
         LEFT JOIN (SELECT sessionId, viewId, sub_sesjon, previousViewId, skjerm, inntrykk, klikk, secondsConsumed FROM VISNING) v3 ON v2.viewId = v3.previousViewId AND v2.sub_sesjon = v3.sub_sesjon AND v2.sessionId = v3.sessionId
  )
  
  SELECT platform, tidspunkt, `pålogget besøk`, --visning1, visning2, visning3,
         CONCAT(visning1, ' > ', visning2, ' > ', visning3) sti,
         SUM(secondsConsumed) `Totalt konsum`, SUM(inntrykk) `Totalt inntrykk`, SUM(klikk) `Totalt klikk`, COUNT(*) Antall
    FROM STIER
   WHERE visning2 IS NOT NULL
     AND visning3 IS NOT NULL
   GROUP BY ALL
   ORDER BY Antall DESC
#+end_src

* Aktivitetsmønster
Det neste jeg skal undersøke er aktivitet i løpet av døgnet.

#+name: tidspunkt
#+begin_src bigquery
    #standardSQL
  SELECT platform,
         TIME(EXTRACT(HOUR FROM TIME(timeFrame, 'Europe/Oslo')),
  	    CAST(20 * FLOOR(
  	         EXTRACT(MINUTE FROM TIME(timeFrame, 'Europe/Oslo')) / 20) AS INT64),
  	    0) tidspunkt,
         HLL_COUNT.MERGE(visitorsSketch) klienter
    FROM `nrk-datahub.snowplow_aggregate.views_5min_v01`
   WHERE partitionDate = CURRENT_DATE - 1
     AND nrkService = 'nrktv'
     AND platform IN ('mob','tv')
   GROUP BY ALL
   ORDER BY 1, 2
#+end_src

#+begin_src python :noweb yes
  spørring = """
  <<tidspunkt>>
  """

  df_tp = pandas_gbq.read_gbq(spørring)
  df_tp["tidspunkt"] = pd.to_datetime(df_tp.tidspunkt, format="%H:%M:%S")
  df_tp["andel_klienter"] = (df_tp.set_index("platform")["klienter"] /
                             df_tp.groupby("platform")["klienter"].sum()).values
#+end_src

#+begin_src python
  def tidsplot(df, verdier):      
      fig, ax = plt.subplots(figsize=(11,7))
      ax.xaxis.set_major_locator(mdates.HourLocator(range(0, 24, 3)))
      ax.xaxis.set_minor_locator(mdates.MinuteLocator(range(0, 60, 20)))
      ax.xaxis.set_major_formatter(DateFormatter("%H:%M"))
      plot_df = df.pivot(index="tidspunkt",
                         columns="platform",
                         values=verdier)
      ax.plot(plot_df.index, plot_df.mob, label="mob")
      ax.plot(plot_df.index, plot_df.tv, label="tv")
      ax.legend()
      return (plot_df, ax)
#+end_src

#+RESULTS:
: None

#+begin_src python :results graphics file output :file figurer/tidspunkt.png
  pil = dict(arrowstyle="->", facecolor="black")
  plot_df, ax = tidsplot(df_tp, "klienter")
  ax.set_title("Antall klienter gjennom døgnet i 20 minutters intervaller")
  ax.annotate(f"Mellom kl. {plot_df[plot_df.mob>plot_df.tv].index.min().strftime("%H:%M")} og kl. {plot_df[plot_df.mob>plot_df.tv].index.max().strftime("%H:%M")}\ner det flere besøk fra mob-klienter\nenn tv-klienter.",
              xy=(plot_df[plot_df.mob>plot_df.tv].index.min(),plot_df.loc[plot_df[plot_df.mob>plot_df.tv].index.min()].mob),
              xytext=(pd.to_datetime("01:00", format="%H:%M"), 30000), arrowprops=pil)
#+end_src

#+RESULTS:
[[file:figurer/tidspunkt.png]]

#+begin_src python :results graphics file output :file figurer/tidspunkt_andeler.png
  ax = tidsplot(df_tp, "andel_klienter")
  ax.set_title("Fordeling av klienter gjennom døgnet i 20 minutters intervaller")
#+end_src

#+RESULTS:
[[file:figurer/tidspunkt_andeler.png]]

* Mobilen som fjernkontroll
Er NRK TV på mobilen bare et verktøy for å spille av innhold på storskjerm? Fungerer egentlig mobilen bare som en fjernkontroll for NRK TV? La meg finne det ut. Denne spørringen gir tall for de siste syv dagene.

#+begin_src bigquery
  #standardSQL
  WITH
    GRUNNLAG AS (
      SELECT sessionId, visitorId,
             CASE
               WHEN mobileViewName = 'chromecastRemote' THEN 'cast'
               WHEN avspilling THEN 'avspilling'
             END type
        FROM `nrk-datahub.snowplow_processed.views_v02`
             LEFT JOIN (SELECT viewId, true avspilling
                          FROM `nrk-datahub.snowplow_processed.playback_v02`
                         WHERE partitionDate >= CURRENT_DATE - 7
                           AND nrkService = 'nrktv') USING(viewId)
       WHERE partitionDate >= CURRENT_DATE - 7
         AND nrkService = 'nrktv'),

    METRIKKER1 AS (
      SELECT 1 nr, 'besøk' benevning,
  	   COUNT(DISTINCT sessionId) Antall,
  	   COUNT(DISTINCT IF(type = 'cast', sessionId, NULL)) casting,
  	   COUNT(DISTINCT IF(type = 'avspilling', sessionId, NULL)) avspilling, 
        FROM GRUNNLAG
       UNION ALL
      SELECT 2, 'klienter',
  	   COUNT(DISTINCT visitorId),
  	   COUNT(DISTINCT IF(type = 'cast', visitorId, NULL)),
  	   COUNT(DISTINCT IF(type = 'avspilling', visitorId, NULL))
        FROM GRUNNLAG
       UNION ALL
      SELECT 3, 'besøk / klienter',
  	   COUNT(DISTINCT sessionId) / COUNT(DISTINCT visitorId),
  	   COUNT(DISTINCT IF(type = 'cast', sessionId, NULL)) /
  	     COUNT(DISTINCT IF(type = 'cast', visitorId, NULL)),
  	   COUNT(DISTINCT IF(type = 'avspilling', sessionId, NULL)) /
  	     COUNT(DISTINCT IF(type = 'avspilling', visitorId, NULL))
        FROM GRUNNLAG)

    SELECT benevning, ROUND(Antall, 2) Antall,
           ROUND(casting, 2) casting,
           ROUND(avspilling, 2) avspilling,
           ROUND(casting / Antall, 3) `Andel casting`,
           ROUND(avspilling / Antall, 2) `Andel avspilling`
      FROM METRIKKER1
     ORDER BY nr
#+end_src

#+RESULTS:
| benevning        |     Antall |  casting | avspilling | Andel casting | Andel avspilling |
|------------------+------------+----------+------------+---------------+------------------|
| besøk            | 10030639.0 | 176263.0 |  6592479.0 |         0.018 |             0.66 |
| klienter         |  3000407.0 |  57919.0 |  1914681.0 |         0.019 |             0.64 |
| besøk / klienter |       3.34 |     3.04 |       3.44 |          0.91 |             1.03 |

I løpet av en syvdagers periode er det kun 1,8 % av besøkene som caster, og 1,9 % av klientene brukes til casting avfærre besøk per klient som går til casting enn totalt antall besøk per klient
* Appendix
I løpet av arbeidet har jeg følt behov for å sortere datane i rekkefølgen av etterfølgende viewId-er. Til dette har jeg brukt en rekursiv spørring.
#+begin_src bigquery
  WITH RECURSIVE
    EKSEMPELDATA AS (
      -- SELECT DISTINCT view.id visning, view.previousId forrige_visning
      --   FROM `nrk-datahub.snowplow_processed.events_v03`
      -- WHERE partitionDate = CURRENT_DATE - 2
      --   AND nrkService = 'nrktv'
      --   AND session.id = '000001c6-8b17-4465-abf7-8fccede1a2f5'
      --   AND view.previousId IS NOT NULL
      SELECT viewId visning, previousViewId forrige_visning, mobileViewName,
        FROM `nrk-datahub.snowplow_processed.views_v02`
       WHERE partitionDate = CURRENT_DATE - 2
         AND sessionId IN ('e338d8a9-8609-446a-88b7-62102a448c6c', '000001c6-8b17-4465-abf7-8fccede1a2f5')
         AND nrkService = 'nrktv'
    ),

    VISNINGER AS (
      (SELECT visning visningsid, 1 visningsnummer, mobileViewName FROM EKSEMPELDATA WHERE forrige_visning = '69B376A7-D292-402A-8734-190A409D2EF4')
      UNION ALL
      (SELECT visning, visningsnummer + 1 visningsnummer, e.mobileViewName
         FROM VISNINGER v
              JOIN EKSEMPELDATA e ON (v.visningsid = e.forrige_visning))
    )

  SELECT *
    FROM VISNINGER
   ORDER BY 2
#+end_src
